using System;

public enum ExplotationState
{
	undiscovered = 0,
	discovered = 1,
	probed = 10,
	researched = 99,
	invaded = 100 //reserved for invasion
}

[System.Serializable]
public class Exploitation
{

	public ExplotationState state;

	public float probeDifficulty = 5;
	public float mineEfficiency = 2;
	public float mineChance = 6;

	public void probe (int qProbes)
	{
		float remaining = qProbes - probeDifficulty;
		probeDifficulty -= qProbes ;
		if ( probeDifficulty <= 0 ) { //remaining > 0
			int stateInt = Convert.ToInt32(state);
			stateInt += (int) remaining;
			stateInt = UnityEngine.Mathf.Clamp(stateInt, 0, 99);
			state = (ExplotationState) stateInt;
		} else {
			string msg = "Not enough probes available.";
			UnityEngine.Debug.Log (msg);
			EvHandler.ExecuteEv (UIEvent.SHOW_AUTOFADE_TOOLTIP, msg);
		}
	}


	public void evalResourceDiscovery (int qProbes, ResourceInventory res)
	{
		// resource % get
		if (state.Equals (ExplotationState.undiscovered))
			return;
		// float chance = probeQuantity + (float) state / probeDifficulty;
		// res q get
	}

	public void evalCivDiscovery (int qProbes, int population, float planetSize)
	{
		// civ % discovery
		// qProbes + population / size
	}

}
